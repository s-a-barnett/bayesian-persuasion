var modelName = 'mas-het-simple-adding';

var inferenceParams = {
  experiment: argv.experiment,
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

var testSamples = _.isFinite(argv.testSamples) ? argv.testSamples : 10000;

// prior over rsa hom model parameters
var groupPrior = function(model) {
  var params = model == 'mas' ? {
    gradient : uniformDrift({a: 0, b: 10, width: 1}),
    threshold : uniformDrift({a: -1, b: 1}),
  } : model == 'aa' ? {
    gradient : uniformDrift({a: 0, b: 10, width: 1}),
    threshold : 0.0,
  } : {
    gradient: 0.01,
    threshold: 0,
  };
  return params;
};

var getScore = function(datum, params) {
  // read single observation from overall observations
  var stickLength   = _.toNumber(datum[1]);
  var subjectBelief = _.toNumber(datum[2]);

  // compute belief in idealized model
  var mean = shared.getAAAddingScore('long', stickLength, params);
  var noiseDist = Gaussian({mu: Math.exp(mean), sigma: params.logitSigma});

  // in Gelman et al. notation, this is log(p(y_i | Î¸^s))
  //   for i-th observation, s-th posterior sample
  return _.max([Math.log(0.01), noiseDist.score(subjectBelief)])
};

var getLevels = function(groupWeight, obs) {
  var levels = repeat(obs.length, function() {
    return categorical({ps: groupWeight, vs: ['aa', 'mas']})
  });
  return levels;
};

// var levelDist = function(groupWeight, obs) {
//   return Infer({
//     method: 'forward',
//     samples: testSamples,
//     model: function() {
//       return getLevels(groupWeight, obs);
//     }
//   })
// };

var mixtureScore = function(groupWeight, sharedParams, groupParams, obs, test) {
  var pointScores = mapData({data: obs}, function(datum) {
    var pointScore = shared.logSumExp(map2(function(level, idx) {
      var datumParams = extend(sharedParams, groupParams[level], {level});
      var pointLevelScore = getScore(datum, datumParams);
      var levelPriorScore = Math.log(groupWeight[idx]);
      return pointLevelScore + levelPriorScore;
    }, ['aa', 'mas'], [0, 1]));
    if (!test) {
      query.add('p' + datum[0], pointScore);
      factor(pointScore);
    };
    return pointScore;
  });
  return sum(pointScores);
};

// var batchScore = function( levels, sharedParams, groupParams, obs, test) {
//   var pointScores = mapData({data: obs}, function(datum, i) {
//     var level = levels[i].toString();
//     var datumParams = extend(sharedParams, groupParams[level], {level});
//     var pointScore = getScore(datum, datumParams);

//     if (!test) {
//       query.add('p' + datum[0], pointScore);
//       factor(pointScore);
//     };

//     return pointScore;
//   });
//   return sum(pointScores);
// };

var train = function(obs) {
  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {
      var groupWeightA = uniformDrift({a: 0, b: 1, width: 0.1})
      var groupWeight = [1 - groupWeightA, groupWeightA];
      var logitSigma = 0.3
      var sharedParams = {groupWeight, logitSigma};

      var groupParams = {
        'aa' : groupPrior('aa'),
        'mas' : groupPrior('mas')
      };
      // var levels = getLevels(groupWeight, obs);
      var totalScore = mixtureScore(groupWeight, sharedParams, groupParams, obs, false);

      query.add('mas' + '_gradient', groupParams['mas'].gradient);
      query.add('mas' + '_threshold', groupParams['mas'].threshold);
      query.add('aa' + '_gradient', groupParams['aa'].gradient);

      query.add('groupWeight-aa', sharedParams.groupWeight[0]);
      query.add('groupWeight-mas', sharedParams.groupWeight[1]);
      query.add('logitSigma', logitSigma);

      query.add('score', totalScore);
      query.add('params', JSON.stringify(extend({sharedParams}, {groupParams})));
      return query;
    }
  })
};

if (argv.test == 'true') {
  var obs = csv.read('input/' + argv.experiment + '_data_test_' + argv.fold + '.csv').slice(1, -1);

  var mleString = argv.mleString;
  var mleParams = JSON.parse(mleString);

  var groupParams = mleParams.groupParams;
  var sharedParams = mleParams.sharedParams;

  if (argv.maxScore == 'true') {
    var drawScore = function() {
      var levels = getLevels(sharedParams.groupWeight, obs);
      return batchScore(levels, sharedParams, groupParams, obs, true, {});
    };
    var maxScore = _.max(repeat(testSamples, drawScore))
    console.log(maxScore);
  } else {
    var expectedScore = mixtureScore(sharedParams.groupWeight, sharedParams, groupParams, obs);
    console.log(expectedScore);
  };

} else {
  var data = _.isFinite(argv.fold) ? argv.experiment + '_data_train_' + argv.fold + '.csv' : argv.experiment + '_data_full.csv';
  var obs = csv.read('input/' + data).slice(1, -1);
  // open pointScore file
  var chainFold = "c" + inferenceParams.chain + "f" + argv.fold + argv.experiment;

  // write posterior distribution to new file
  csv.writeDistTable(train(obs), "param,val", inferenceParams.out + "/" + modelName + "-params-posterior_" + chainFold + ".csv");
};
