var modelName = 'mas-het-speakers';

var inferenceParams = {
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

var testSamples = _.isFinite(argv.testSamples) ? argv.testSamples : 10000;

// prior over rsa hom model parameters
var groupPrior = function(model) {
  var params = model == 'mas' ? {
              gradient : exponential({a: 0.01}),
              threshold : uniform({a: 0, b: 1}),
            } : model == 'aa' ? {
              gradient : exponential({a: 0.01}),
              threshold : 0.5,
            } : {
              gradient: 0.01,
              threshold: 0,
            };
  return params;
};

var getScore = function(datum, params) {
  // read single observation from overall observations
  var stickLength   = _.toNumber(datum[1]);
  var subjectBelief = _.toNumber(datum[2]);

  // compute belief in idealized model
  var mean = shared.getAAScore('long', stickLength, params);

  // mu represents the mean of the normal distribution given by the logit
  //   of the model belief
  var mu = mean - Math.log1p(-Math.exp(mean));

  var noiseDist = params.level == 'noise' ?
    Uniform({a: 0., b: 1.}) :
    LogitNormal({mu: mu, sigma: params.logitSigma, a: 0., b: 1.});

  // in Gelman et al. notation, this is log(p(y_i | Î¸^s))
  //   for i-th observation, s-th posterior sample
  var pointScore = noiseDist.score(subjectBelief);

  return pointScore;
};

var getLevels = function(means, obs) {
  var speakerSticks = map(function(o){return o[3];}, obs);

  var levels = map(function(stick) {
    return categorical({ps: means[stick], vs: ['noise', 'aa', 'mas']})
  }, speakerSticks);

  return levels;
};

var levelDist = function(means, obs) {
  return Infer({
    method: 'forward',
    samples: testSamples,
    model: function() {
      return getLevels(means, obs);
    }
  })
};

var mixtureScore = function(means, sharedParams, groupParams, obs) {
  var pointScores = mapData({data: obs}, function(datum) {
    var speakerStick = datum[3];
    var pointLevelScores = map2(function(level, idx) {
      var datumParams = extend(sharedParams, groupParams[level], {level});
      var pointLevelScore = getScore(datum, datumParams);
      var levelPriorScore = Math.log(means[speakerStick][idx]);
      return pointLevelScore + levelPriorScore;
    }, ['noise', 'aa', 'mas'], [0, 1, 2]);

    return shared.logSumExp(pointLevelScores);
  });
  return sum(pointScores);
};

var batchScore = function(levels, sharedParams, groupParams, obs, test, output_handle) {
  var pointScores = mapData({data: obs}, function(datum, i) {
    var level = levels[i].toString();
    var datumParams = extend(sharedParams, groupParams[level], {level});
    var pointScore = getScore(datum, datumParams);

    if (!test) {
      query.add('p' + datum[0], level);
      globalStore.totalScore += pointScore;
      factor(pointScore);

      var iter = shared.iterationTracker() / obs.length;
      var floor_iter = _.floor(iter);

      // write pointScore into separate external file
      if (shared.isRecordedIter(floor_iter, inferenceParams.burn, inferenceParams.lag)) {
        csv.writeLine(datum[0] + "," + pointScore, output_handle);
        if (floor_iter + 1 == iter + (1/obs.length)) {
          console.log(globalStore.totalScore);
        };
      };
    };

    return pointScore;
  });

  return sum(pointScores);
};

var train = function(obs, output_handle) {
  return Infer({method: 'MCMC',
                samples: inferenceParams.samples,
                burn: inferenceParams.burn,
                lag: inferenceParams.lag,
                verbose: inferenceParams.verbose,
                model: function() {
    var logitSigma = Math.abs(cauchy({location: 0, scale: 1}));
    var sharedParams = {logitSigma};

    var groupParams = {
      'noise' : groupPrior('noise'),
      'aa' : groupPrior('aa'),
      'mas' : groupPrior('mas')
    };

    var speakerSticks = map(function(o){return o[3];}, obs);
    var means = {
      '0.9' : _.values(dirichletDrift({alpha: Vector([1, 1, 1])}).data),
      '0.8' : _.values(dirichletDrift({alpha: Vector([1, 1, 1])}).data),
      '0.7' : _.values(dirichletDrift({alpha: Vector([1, 1, 1])}).data),
      '0.4' : _.values(dirichletDrift({alpha: Vector([1, 1, 1])}).data),
      '0.2' : _.values(dirichletDrift({alpha: Vector([1, 1, 1])}).data),
    };

    var levels = getLevels(means, obs);

    globalStore.totalScore = 0;

    batchScore(levels, sharedParams, groupParams, obs, false, output_handle);

    query.add('mas' + '_gradient', groupParams['mas'].gradient);
    query.add('mas' + '_threshold', groupParams['mas'].threshold);
    query.add('aa' + '_gradient', groupParams['aa'].gradient);

    query.add('groupWeight-noise-0.9', means['0.9'][0]);
    query.add('groupWeight-noise-0.8', means['0.8'][0]);
    query.add('groupWeight-noise-0.7', means['0.7'][0]);
    query.add('groupWeight-noise-0.4', means['0.4'][0]);
    query.add('groupWeight-noise-0.2', means['0.2'][0]);

    query.add('groupWeight-aa-0.9', means['0.9'][1]);
    query.add('groupWeight-aa-0.8', means['0.8'][1]);
    query.add('groupWeight-aa-0.7', means['0.7'][1]);
    query.add('groupWeight-aa-0.4', means['0.4'][1]);
    query.add('groupWeight-aa-0.2', means['0.2'][1]);

    query.add('groupWeight-mas-0.9', means['0.9'][2]);
    query.add('groupWeight-mas-0.8', means['0.8'][2]);
    query.add('groupWeight-mas-0.7', means['0.7'][2]);
    query.add('groupWeight-mas-0.4', means['0.4'][2]);
    query.add('groupWeight-mas-0.2', means['0.2'][2]);

    query.add('logitSigma', logitSigma);

    query.add('score', globalStore.totalScore);
    query.add('params', JSON.stringify(extend({sharedParams}, {groupParams}, {means})));

    return query;
  }})
};

if (argv.test == 'true') {
  var obs = csv.read('input/data_test_' + argv.fold + '.csv').slice(1, -1);

  var mleString = argv.mleString;
  var mleParams = JSON.parse(mleString);

  var groupParams = mleParams.groupParams;
  var sharedParams = mleParams.sharedParams;

  if (argv.maxScore == 'true') {
    var drawScore = function() {
      var levels = getLevels(mleParams.means, obs);
      return batchScore(levels, sharedParams, groupParams, obs, true, {});
    };
    var maxScore = _.max(repeat(testSamples, drawScore))
    console.log(maxScore);
  } else {
    var expectedScore = mixtureScore(mleParams.means, sharedParams, groupParams, obs);
    console.log(expectedScore);
  };

} else {
  var data = _.isFinite(argv.fold) ? 'data_train_' + argv.fold + '.csv' : 'rsa-het-data.csv';
  var obs = csv.read('input/' + data).slice(1, -1);
  // open pointScore file
  var chainFold = "c" + inferenceParams.chain + "f" + argv.fold;
  var output_handle = csv.open(inferenceParams.out + "/" + modelName + "-pointScores_" + chainFold + ".csv");
  csv.writeLine("gameid,score", output_handle);

  // write posterior distribution to new file
  csv.writeDistTable(train(obs, output_handle), "param,val", inferenceParams.out + "/" + modelName + "-params-posterior_" + chainFold + ".csv");
  csv.close(output_handle);
};
