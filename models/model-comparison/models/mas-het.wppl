var modelName = 'mas-het';

var inferenceParams = {
  experiment: argv.experiment,
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

// prior over rsa hom model parameters
var groupPrior = function(model) {
  var params = model == 'mas' ? {
    gradient : uniformDrift({a: 0, b: 10, width: 1}),
    threshold : uniformDrift({a: -1, b: 1}),
  } : model == 'aa' ? {
    gradient : uniformDrift({a: 0, b: 10, width: 1}),
    threshold : 0.0,
  } : {
    gradient: 0.01,
    threshold: 0,
  };
  return params;
};

var getScore = function(datum, params) {
  // read single observation from overall observations
  var stickLength   = _.toNumber(datum[1]);
  var subjectBelief = _.toNumber(datum[2]);
  var mean = shared.getAAAddingScore('long', stickLength, params);
  var noiseDist = Gaussian({mu: Math.exp(mean), sigma: params.sigma});
  return {prediction: Math.exp(mean),
          score: _.max([Math.log(0.01), noiseDist.score(subjectBelief)])};
};

var mixtureScore = function(groupWeight, sharedParams, groupParams, obs) {
  var pointScores = mapData({data: obs}, function(datum) {
    var aa = getScore(datum, extend(sharedParams, groupParams['aa'], {level: 'aa'}));
    var mas = getScore(datum, extend(sharedParams, groupParams['mas'], {level: 'mas'}));
    var pointScore = shared.logSumExp(
      [aa.score + Math.log(groupWeight[0]), mas.score + Math.log(groupWeight[1])]
    );
    var prediction = aa.prediction * groupWeight[0] + mas.prediction * groupWeight[1];

    query.add('pointscore_' + datum[0], pointScore);
    query.add('prediction_' + datum[0], prediction);
    factor(pointScore);
    return pointScore;
  });
  return sum(pointScores);
};

var train = function(obs) {
  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {
      var groupWeightA = uniformDrift({a: 0, b: 1, width: 0.1})
      var groupWeight = [1 - groupWeightA, groupWeightA];
      var sigma = 0.3
      var sharedParams = {groupWeight, sigma};

      var groupParams = {
        'aa' : groupPrior('aa'),
        'mas' : groupPrior('mas')
      };

      var totalScore = mixtureScore(groupWeight, sharedParams, groupParams, obs, false);

      query.add('mas' + '_gradient', groupParams['mas'].gradient);
      query.add('mas' + '_threshold', groupParams['mas'].threshold);
      query.add('aa' + '_gradient', groupParams['aa'].gradient);

      query.add('groupWeight-aa', sharedParams.groupWeight[0]);
      query.add('groupWeight-mas', sharedParams.groupWeight[1]);
      query.add('sigma', sigma);

      query.add('likelihood', totalScore);
      query.add('params', JSON.stringify(extend({sharedParams}, {groupParams})));
      return query;
    }
  })
};

var obs = csv.read('input/' + argv.experiment + '_data_full.csv').slice(1, -1);
var chain = "c" + inferenceParams.chain + argv.experiment;

// write posterior distribution to new file
csv.writeDistTable(train(obs), "param,val", inferenceParams.out + "/" + modelName + "-params-posterior_" + chain + ".csv");
