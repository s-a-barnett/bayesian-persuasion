var modelName = 'mas-hom-adding';

var inferenceParams = {
  experiment: argv.experiment,
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

// prior over rsa hom model parameters
var paramsPrior = function() {
  // steepness of logistic stick-to-strength curve
  var gradient = uniformDrift({a: 0, b: 10, width: 1})
  // prior threshold of confidence (fixed at 0.5 for simple A&A)
  var threshold = uniformDrift({a: -1, b: 1, width: 0.1});
  // variance for mean noise
  var logitSigma = 0.3//Math.abs(cauchy({location: 0, scale: 1}));
  return {
    'gradient': gradient,
    'threshold': threshold,
    'logitSigma': logitSigma
  };
};

var batchScore = function(params, obs, test) {
  var pointScores = mapData({data: obs}, function(datum) {
    var stickLength   = _.toNumber(datum[1]);
    var subjectBelief = _.toNumber(datum[2]);

    // compute belief in idealized model
    var mean = shared.getAAAddingScore('long', stickLength, params);
    var noiseDist = Gaussian({mu: Math.exp(mean), sigma: params.logitSigma});
    var pointScore = _.max([Math.log(0.01), noiseDist.score(subjectBelief)]);

    if (!test) {
      query.add('p' + datum[0], pointScore);
      query.add('predictionFor' + datum[0] + '@' + stickLength + '=' + subjectBelief, Math.exp(mean));
      factor(pointScore);
    };

    return pointScore;
  });
  return sum(pointScores);
};

var train = function(obs) {
  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {

      var params = paramsPrior();
      var totalScore = batchScore(params, obs, false);

      query.add('gradient', params.gradient);
      query.add('threshold', params.threshold);
      query.add('logitSigma', params.logitSigma);

      query.add('score', totalScore);
      query.add('params', JSON.stringify(params));

      return query;
    }
  })
};

if (argv.test == 'true') {
  var obs = csv.read('input/' + argv.experiment + '_data_test_' + argv.fold + '.csv').slice(1, -1);

  var mleString = argv.mleString;
  var mleParams = JSON.parse(mleString);

  var expectedScore = batchScore(mleParams, obs, true, {})

  console.log(expectedScore);

} else {
  var data = _.isFinite(argv.fold) ? argv.experiment + '_data_train_' + argv.fold + '.csv' : argv.experiment + '_data_full.csv';
  var obs = csv.read('input/' + data).slice(1, -1);
  // open pointScore file
  var chainFold = "c" + inferenceParams.chain + "f" + argv.fold + argv.experiment;

  // write posterior distribution to new file
  csv.writeDistTable(train(obs), "param,val", inferenceParams.out + "/" + modelName + "-params-posterior_" + chainFold + ".csv");
};
