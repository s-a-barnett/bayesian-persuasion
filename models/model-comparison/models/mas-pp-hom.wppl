var inferenceParams = {
  experiment: argv.experiment,
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

// prior over rsa hom model parameters
var paramsPrior = function() {
  // steepness of logistic stick-to-strength curve
  var gradient = uniformDrift({a: 0, b: 10, width: 1})
  // prior threshold of confidence (fixed at 0.5 for simple A&A)
  var threshold = uniformDrift({a: -1, b: 1, width: 0.1});
  // variance for mean noise
  var logitSigma = 0.3//Math.abs(cauchy({location: 0, scale: 1}));
  return {
    'gradient': gradient,
    'threshold': threshold,
    'logitSigma': logitSigma
  };
};

var masHom = function(obs) {

  var observe_fn = function(datum, params) {
    // read single observation from overall observations
    var stickLength   = _.toNumber(datum[1]);
    var subjectBelief = _.toNumber(datum[2]);

    var mean = shared.getAAAddingScore('long', stickLength, params);
    var noiseDist = Gaussian({mu: Math.exp(mean), sigma: params.logitSigma});

    factor(_.max([Math.log(0.01), noiseDist.score(subjectBelief)]));

    return noiseDist;
  };

  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {
      var params = paramsPrior();

      var noiseDists = mapData({data: obs}, function(datum, i) {
        var noiseDist = observe_fn(datum, params);
        return noiseDist;
      });

      var beliefs = map(function(d) {return sample(d)}, noiseDists);
      var gameids = map(function(o){return o[0];}, obs);

      return _.zipObject(gameids, beliefs);
    }})
};

// read observations from csv file (slice to skip header and empty final line)
var obs = csv.read('input/' + argv.experiment + '_data_no0.2_0.4.csv').slice(1, -1);

// write posterior distribution to new file
csv.writeJoint(masHom(obs), inferenceParams.out + "/mas-pp-hom-params-posterior_" + argv.experiment + "_" + inferenceParams.chain + ".csv");
