var modelName = 'rsa-het-simple';

var inferenceParams = {
  experiment: argv.experiment,
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

var testSamples = _.isFinite(argv.testSamples) ? argv.testSamples : 10000;

// prior over rsa het model parameters
var groupPrior = function(model) {
  var params = model == 'J1' ? {
    nSticks : uniformDraw([3, 4, 5]),  // number of sticks modelled by judge
    agentBias : uniformDrift({a: 0, b: 10, width: 1}),   // fixed value of judge for S1/S2 speaker
  } : model == 'J0' ? {
    nSticks : uniformDraw([3, 4, 5]),  // number of sticks modelled by judge
    agentBias : 0,
  } : {
    nSticks: 5,
    agentBias: 0,
  };
  return extend(params, {getJ1Score: shared.getJ1Score_generator(params)});
};

var getScore = function(datum, params) {
  // read single observation from overall observations
  var stickLength   = _.toNumber(datum[1]);
  var subjectBelief = _.toNumber(datum[2]);

  // compute belief in idealized model
  var mean = params.level == 'J1' ?
      params.getJ1Score('long', stickLength, params) :
      params.level == 'J0' ?
      shared.getJ0Score('long', stickLength, params) :
      console.error('unknown level', params.level);

  var noiseDist = Gaussian({mu: Math.exp(mean), sigma: params.logitSigma});

  // in Gelman et al. notation, this is log(p(y_i | Î¸^s))
  //   for i-th observation, s-th posterior sample
  return _.max([Math.log(0.01), noiseDist.score(subjectBelief)])
};

var getLevels = function(groupWeight, obs) {
  var levels = repeat(obs.length, function() {
    return categorical({ps: groupWeight, vs: ['J0', 'J1']})
  });
  return levels;
};

var levelDist = function(groupWeight, obs) {
  return Infer({
    method: 'forward',
    samples: testSamples,
    model: function() {
      return getLevels(groupWeight, obs);
    }
  })
};

var mixtureScore = function(groupWeight, sharedParams, groupParams, obs) {
  var pointScores = mapData({data: obs}, function(datum) {
    var pointLevelScores = map2(function(level, idx) {
      var datumParams = extend(sharedParams, groupParams[level], {level});
      var pointLevelScore = getScore(datum, datumParams);
      var levelPriorScore = Math.log(groupWeight[idx]);
      return pointLevelScore + levelPriorScore;
    }, ['J0', 'J1'], [0, 1]);

    return shared.logSumExp(pointLevelScores);
  });
  return sum(pointScores);
};

var batchScore = function(levels, sharedParams, groupParams, obs, test) {
  var pointScores = mapData({data: obs}, function(datum, i) {
    var level = levels[i].toString();
    var datumParams = extend(sharedParams, groupParams[level], {level});
    var pointScore = getScore(datum, datumParams);

    if (!test) {
      query.add('p' + datum[0], pointScore);
      factor(pointScore);
    };

    return pointScore;
  });
  return sum(pointScores);
};

var train = function(obs) {
  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {
      var groupWeightA = uniformDrift({a: 0, b: 1, width: .1})
      var groupWeight = [1 - groupWeightA, groupWeightA]
      var logitSigma = 0.3
      var sharedParams = {groupWeight, logitSigma};

      var groupParams = {
        'J0' : groupPrior('J0'),
        'J1' : groupPrior('J1')
      };
      var levels = getLevels(groupWeight, obs);

      var totalScore =batchScore(levels, sharedParams, groupParams, obs, false);

      query.add('J0nSticks', groupParams['J0'].nSticks);
      query.add('J1nSticks', groupParams['J1'].nSticks);
      query.add('J1agentBias', groupParams['J1'].agentBias);
      query.add('groupWeight-J0', sharedParams.groupWeight[0]);
      query.add('groupWeight-J1', sharedParams.groupWeight[1]);
      query.add('logitSigma', logitSigma);

      query.add('score', totalScore);
      query.add('params', JSON.stringify(extend({sharedParams}, {groupParams})));

      return query;
    }})
};

if (argv.test == 'true') {
  var obs = csv.read('input/' + argv.experiment + '_data_test_' + argv.fold + '.csv').slice(1, -1);

  var mleString = argv.mleString;
  var mleParams = JSON.parse(mleString);

  var groupParams = {
    'J0': extend(mleParams.groupParams.J0, {getJ1Score: shared.getJ1Score_generator(mleParams.groupParams.J0)}),
    'J1': extend(mleParams.groupParams.J1, {getJ1Score: shared.getJ1Score_generator(mleParams.groupParams.J1)}),
  };

  var sharedParams = mleParams.sharedParams;

  if (argv.maxScore == 'true') {
    var drawScore = function() {
      var levels = getLevels(sharedParams.groupWeight, obs);
      return batchScore(levels, sharedParams, groupParams, obs, true, {});
    };
    var maxScore = _.max(repeat(testSamples, drawScore))
    console.log(maxScore);
  } else {
    var expectedScore = mixtureScore(sharedParams.groupWeight, sharedParams, groupParams, obs);
    console.log(expectedScore);
  };

} else {
  var data = _.isFinite(argv.fold) ? argv.experiment + '_data_train_' + argv.fold + '.csv' : argv.experiment + '_data_full.csv';
  var obs = csv.read('input/' + data).slice(1, -1);
  // open pointScore file
  var chainFold = "c" + inferenceParams.chain + "f" + argv.fold + argv.experiment;

  // write posterior distribution to new file
  csv.writeDistTable(train(obs), "param,val", inferenceParams.out + "/" + modelName + "-params-posterior_" + chainFold + ".csv");
};
