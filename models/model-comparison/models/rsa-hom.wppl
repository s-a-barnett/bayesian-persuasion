var modelName = 'rsa-hom';

var inferenceParams = {
  experiment: argv.experiment,
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool,
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

// prior over rsa hom model parameters
var paramsPrior = function() {
  var agentBias = uniformDrift({a: 0, b: 10, width: 1});
  var offset = uniformDrift({a: -.5, b: .5, width: 0.05});
  return {
    'nSticks': 5,
    'agentBias': agentBias,
    'offset' : offset,
    'sigma': 0.3,
    'level': 'J1'
  };
};

var batchScore = function(params, obs, test) {
  var pointScores = mapData({data: obs}, function(datum) {
    var stickLength   = _.toNumber(datum[1]);
    var subjectBelief = _.toNumber(datum[2]);
    var mean = params.getJ1Score('long', stickLength, params)
    var noiseDist = Gaussian({mu: Math.exp(mean) + params.offset, sigma: params.sigma});
    var pointScore = _.max([Math.log(0.01), noiseDist.score(subjectBelief)])

    query.add('score_' + datum[0], pointScore);
    factor(pointScore);

    return pointScore;
  });
  return sum(pointScores);
};

var train = function(obs, output_handle) {
  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {

      var params = extend(paramsPrior(),{
        getJ1Score: shared.getJ1Score_generator(rawParams)
      });
      globalStore.totalScore = 0;

      batchScore(params, obs, false, output_handle);

      query.add('nSticks', params.nSticks);
      query.add('agentBias', params.agentBias);
      query.add('sigma', params.sigma);
      query.add('level', params.level);
      query.add('offset', params.offset);
      query.add('score', totalScore);
      query.add('params', JSON.stringify(rawParams));

      return query;
    }
  })
};

var obs = csv.read('input/' + argv.experiment + '_data_full.csv').slice(1, -1);
var chain = "c" + inferenceParams.chain + argv.experiment;

// write posterior distribution to new file
csv.writeDistTable(train(obs), "param,val", inferenceParams.out + "/" + modelName + "-params-posterior_" + chain + ".csv");
