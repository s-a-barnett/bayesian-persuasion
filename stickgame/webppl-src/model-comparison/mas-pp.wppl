var inferenceParams = {
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool
  chain: _.isFinite(argv.chain) ? argv.chain : 1,
  out: argv.out
};

// prior over rsa hom model parameters
var paramsPrior = function() {
  // steepness of logistic stick-to-strength curve
  var gradient = exponential({a: 0.01});
  // prior threshold of confidence (fixed at 0.5 for simple A&A)
  var threshold = uniform({a: 0, b: 1});
  // variance for mean noise
  var logitSigma = 1;
  return {
    'gradient': gradient,
    'threshold': threshold,
    'logitSigma': logitSigma
  };
};

var masHom = function(obs) {

  var observe_fn = function(datum, params) {
    // read single observation from overall observations
    var stickLength = _.toNumber(datum[1]);
    var subjectBelief = _.toNumber(datum[2]);

    // compute belief in idealized model
    var mean = shared.getAAScore('long', stickLength, params) ;

    // mu represents the mean of the normal distribution given by the logit
    //   of the model belief
    var mu = mean - Math.log1p(-Math.exp(mean));

    var noiseDist = LogitNormal({mu: mu, sigma: params.logitSigma, a: 0., b: 1.});

    // in Gelman et al. notation, this is log(p(y_i | Î¸^s))
    //   for i-th observation, s-th posterior sample
    var pointScore = noiseDist.score(subjectBelief);
    globalStore.totalScore += pointScore;

    var iter = shared.iterationTracker() / obs.length;
    var floor_iter = _.floor(iter);

    // write pointScore into separate external file
    if (shared.isRecordedIter(floor_iter, inferenceParams.burn, inferenceParams.lag)) {
      if (floor_iter + 1 == iter + (1/obs.length)) {
        // console.log(globalStore.totalScore);
      };
    };

    factor(pointScore);

    return noiseDist;
  };

  return Infer({method: 'MCMC',
                samples: inferenceParams.samples,
                burn: inferenceParams.burn,
                lag: inferenceParams.lag,
                verbose: inferenceParams.verbose,
                model: function() {

    var params = paramsPrior();

    globalStore.totalScore = 0;
    var noiseDists = mapData({data: obs}, function(datum) {
      var noiseDist = observe_fn(datum, params);
      return noiseDist;
    });

    var beliefs = map(function(d) {return sample(d)}, noiseDists);
    var gameids = map(function(o){return o[0];}, obs);

    return _.zipObject(gameids, beliefs);
  }})
};

// read observations from csv file (slice to skip header and empty final line)
var obs = csv.read('data/rsa-het-data_no0.2_0.4.csv').slice(1, -1);

// write posterior distribution to new file
csv.writeJoint(masHom(obs), inferenceParams.out + "results/mas-pp-params-posterior_" + inferenceParams.chain + ".csv");
