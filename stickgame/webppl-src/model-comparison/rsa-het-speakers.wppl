var inferenceParams = {
  samples: argv.samples,
  burn: argv.burn,
  lag: argv.lag,
  verbose: (argv.verbose == 'true'), // converting str to bool
  out: argv.out
};

// open pointScore file
var output_handle = csv.open(inferenceParams.out + "results/rsa-het-speaker-pointScores.csv");
csv.writeLine("logitSigma,nSticks,agentBias,level,gameid,stickLength,subjectBelief,speakerStick,score", output_handle);

// prior over rsa het model parameters
var groupPrior = function() {
  var params = {
    nSticks : uniformDraw([2, 3, 4, 5]),  // number of sticks modelled by judge
    agentBias : uniformDrift({a: 0, b: 10, width: 1}),   // fixed value of judge for S1/S2 speaker
  };
  return extend(params, {getJ1Score: shared.getJ1Score_generator(params)});
};

var rsaHet = function(obs, output_handle) {

  var observe_fn = function(datum, params) {
    // read single observation from overall observations
    var stickLength   = _.toNumber(datum[1]);
    var subjectBelief = _.toNumber(datum[2]);

    // compute belief in idealized model
    var mean = params.level == 'J1' ?
        params.getJ1Score('long', stickLength, params) :
        shared.getJ0Score('long', stickLength, params) ;

    // mu represents the mean of the normal distribution given by the logit
    //   of the model belief
    var mu = mean - Math.log1p(-Math.exp(mean));

    var noiseDist = LogitNormal({mu: mu, sigma: params.logitSigma, a: 0., b: 1.});

    // in Gelman et al. notation, this is log(p(y_i | Î¸^s))
    //   for i-th observation, s-th posterior sample
    var pointScore = noiseDist.score(subjectBelief);
    globalStore.totalScore += pointScore;

    var iter = shared.iterationTracker() / obs.length;
    var floor_iter = _.floor(iter);

    // write pointScore into separate external file
    if (shared.isRecordedIter(floor_iter, inferenceParams.burn, inferenceParams.lag)) {
      csv.writeLine(_.values(_.omit(params, ['getJ1Score'])).toString() + "," +
                    datum.toString() + "," + pointScore,
                    output_handle);
      if (floor_iter + 1 == iter + (1/obs.length)) {
        console.log(globalStore.totalScore);
      };
    };

    factor(pointScore);
  };

  return Infer({
    method: 'MCMC',
    samples: inferenceParams.samples,
    burn: inferenceParams.burn,
    lag: inferenceParams.lag,
    verbose: inferenceParams.verbose,
    model: function() {
      var logitSigma = 1;
      var sharedParams = {logitSigma};

      var groupParams = {
        'J0' : groupPrior(),
        'J1' : groupPrior()
      };

      var speakerSticks = map(function(o){return o[3];}, obs);
      var means = {
        '0.9' : uniformDrift({a: 0, b: 1, width: .1}),
        '0.8' : uniformDrift({a: 0, b: 1, width: .1}),
        '0.7' : uniformDrift({a: 0, b: 1, width: .1}),
        '0.4' : uniformDrift({a: 0, b: 1, width: .1}),
        '0.2' : uniformDrift({a: 0, b: 1, width: .1}),
      };

      query.add('J0nSticks', groupParams['J0'].nSticks);
      query.add('J1nSticks', groupParams['J1'].nSticks);
      query.add('J0agentBias', groupParams['J0'].agentBias);
      query.add('J1agentBias', groupParams['J1'].agentBias);
      query.add('logitSigma', sharedParams.logitSigma);
      query.add('groupWeight-0.9', means['0.9']);
      query.add('groupWeight-0.8', means['0.8']);
      query.add('groupWeight-0.7', means['0.7']);
      query.add('groupWeight-0.4', means['0.4']);
      query.add('groupWeight-0.2', means['0.2']);

      var levels = map(function(stick){return flip(means[stick]) ? 'J1' : 'J0'}, speakerSticks);

      globalStore.totalScore = 0;

      mapData({data: obs}, function(datum, i) {
        var level = levels[i].toString();
        var datumParams = extend(sharedParams, groupParams[level], {level});

        query.add('p' + datum[0], level);
        observe_fn(datum, datumParams);
      });

      return query;
    }})
};

// read observations from csv file (slice to skip header and empty final line)
var obs = csv.read('data/rsa-het-data.csv').slice(1, -1);

// write posterior distribution to new file
csv.writeDistTable(rsaHet(obs, output_handle), "param,val", inferenceParams.out + "results/rsa-het-speaker-params-posterior.csv");
csv.close(output_handle);
