// Run simulations for weak evidence effect

// Parameters to vary during the simulation
// Read from the command line
var nSticks = argv.nSticks
var agent0stick = argv.agent0stick
var agent1stick = argv.agent1stick
var numExp = argv.numExp

// Remove first instance of element found in l
var removeSingleElement = function(element, l) {
  var i = _.indexOf(l, element)
  return l.slice(0, i).concat(l.slice(i+1))
}

// We don't want the 'order' of the sticks to matter; this gets all combinations
var possibleStickCombinations = Infer({method: 'enumerate', model :function() {
  return sort(repeat(nSticks, function() {
    return _.round(uniformDraw(_.range(.025, 1, .05)), 3)
  }))
}}).support()

var stickPrior = function() {
  return categorical({vs: possibleStickCombinations})
}

// Discretized U-shape prior
var biasPrior = function() {
  return categorical({vs: [-5, -1, 0, 1, 5], ps: [.25, .2, .1, .2, .25]})
}

// L0 judge: assumes data received are i.i.d.
// Note: b/c agentIDs are irrelevant, we assume here the observations are just array of lengths to improve caching
var literalJudge = cache(function(obs) {
  // recursively condition being in list of sticks
  var observe_fn = function(observations, sticks) {
    if(observations.length > 0) {
      var datum = first(observations)
      factor(_.includes(sticks, datum)? 0 : -100)
      observe_fn(rest(observations), removeSingleElement(datum, sticks))
    }
  };
  
  return Infer({method: 'enumerate', model: function() {
    // assume latent sticks drawn i.i.d
    var sticks = stickPrior()

    // Condition on observations 
    observe_fn(obs, sticks)
    
    // return marginal distribution of interest
    return _.mean(sticks) >= .5 ? 'long' : 'short'
  }})
})

// S1 agent has a bias towards longer or shorter sticks, depending on what she
// thinks the judge will infer about the mean stick length
// Note: sticks only involve those currently available to select
// prevEvidence refers to the stick observations already made
var pragmaticAgent = function(bias, sticks, prevEvidence, agentID) {
  return Infer({method: 'enumerate', model: function() {
    var stick = uniformDraw(sticks)

    // Counterfactually added evidence
    var evidence = prevEvidence.concat(
      [{'agentID': agentID, stickLength: stick}]
    )

    // Soft-max utility of showing stick proportional to probability
    // that judge says 'long' after seeing this stick, weighted by bias
    factor(bias * literalJudge(_.map(evidence, 'stickLength')).score('long'))
    return stick
  }})
}

// L1 judge models bias of agent
var pragmaticJudge = function(obs) {

  // Recursively observe, accounting for earlier choices
  // Keeps track of previous observations in prevObs
  // Models samples as being from pragmaticAgent
  var observe_fn = function(observations, prevObs, sticks, biases) {
    if(observations.length > 0) {
      var datum = first(observations)
      observe(pragmaticAgent(biases[datum.agentID], sticks, prevObs, datum.agentID), datum.stickLength);
      observe_fn(
        rest(observations),
        prevObs.concat(datum),
        removeSingleElement(datum.stickLength, sticks),
        biases
      )
    }
  }

  return Infer({method: 'enumerate', model: function() {
    // assume latent sticks drawn i.i.d
    var sticks = stickPrior();

    // assume agents have independent
    var biases = {agent0: biasPrior(), agent1: biasPrior()}

    // Condition on observations coming from biased agent
    observe_fn(obs, [], sticks, biases);

    // return marginal distributions of interest
    return {
      isLong: _.mean(sticks) >= .5, bias0: biases['agent0'], bias1: biases['agent1']
    }
  }})
}

// Agent 0's first move.
var priorEvidence = [{'agentID': 'agent0', stickLength: agent0stick}]
// Agent 1's following move.
var weakEvidence = [{'agentID': 'agent0', stickLength: agent0stick},
                    {'agentID' : 'agent1', stickLength: agent1stick}]

// Record simulation values for model with bias factor
console.log(JSON.stringify(literalJudge(_.map(priorEvidence, 'stickLength'))))
console.log(JSON.stringify(literalJudge(_.map(weakEvidence, 'stickLength'))))

//console.log(pragmaticAgent(1, [0.025, 0.075, 0.975], [], 1))
console.log(JSON.stringify(marginalize(pragmaticJudge(priorEvidence), function(v) {return v['isLong']})))
console.log(JSON.stringify(marginalize(pragmaticJudge(weakEvidence), function(v) {return v['isLong']})))
// csv.writeJoint(pragmaticJudge(priorEvidence), 'results/exp' + numExp + 'priorL1.csv')
// csv.writeJoint(pragmaticJudge(weakEvidence), 'results/exp' + numExp + 'weakL1.csv')
// // Record simulation values for model without bias factor
// csv.writeJoint(literalJudge(priorEvidence), 'results/exp' + numExp + 'priorL0.csv')
// csv.writeJoint(literalJudge(weakEvidence), 'results/exp' + numExp + 'weakL0.csv')
