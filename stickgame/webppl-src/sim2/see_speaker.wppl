// Run experiments for strong evidence effect with pragmatic agent
// webppl see_speaker.wppl --require ../shared --require webppl-csv -- --nSticks=3 --agentBias=1 --numExp=1

// Parameters to vary during the simulation
// Read from the command line
var params = {
  nSticks : argv.nSticks,
  numExp : argv.numExp,
  agentBias : argv.agentBias,
  biasPrior : argv.biasPrior,
  fixedBiasAgent1 : 0 // Shortcuts spurious inference about agent1
};

// Allows the S2 agent to choose maxSteps sticks, where maxSteps <= nSticks
// To run from the beginning, set stickChoices and stickChoicesValues to []
// These variables allow earlier choices to factor into decision-making
var runAgent = function(bias, sticks, stickChoices, stickChoiceValues, maxSteps, agentType) {
  if(stickChoices.length < maxSteps) {
    var agent = agentType=='S1' ? S1(bias, sticks, stickChoices, 'agent0', params) :
                agentType=='S2' ? S2(bias, sticks, stickChoices, 'agent0', params) :
                error("Enter 'S1' or 'S2'.")
    var stick = sample(agent)
    var choice = [{'agentID': 'agent0', stickLength: stick}]
    runAgent(bias, shared.removeSingleElement(stick, sticks), stickChoices.concat(choice), stickChoiceValues.concat(stick), maxSteps, agentType)
  } else {
    return stickChoiceValues
  }
}

// Simluates the distribution of move sequences given by the runAgent function above.
var choiceSequence = function(bias, sticks, stickChoices, stickChoiceValues, maxSteps, agentType) {
  return Infer({method: 'forward', samples: 100, model: function() {
    var moveSequence = runAgent(bias, sticks, stickChoices, stickChoiceValues, maxSteps, agentType)
    return moveSequence
  }})
}

var maxSteps = 2 // Hard-coded choice for experiments and simulations
var sticks = stickPrior(params.nSticks) // Arbitrarily draw sticks for experiment

var output_handle = csv.open('results/exp' + params.numExp + '_sticks.csv')
csv.writeLine(sticks, output_handle)
csv.close(output_handle)

csv.writeJoint(choiceSequence(argv.agentBias, sticks, [], [], maxSteps, 'S1'), 'results/exp' + params.numExp + '_S1.csv')
csv.writeJoint(choiceSequence(argv.agentBias, sticks, [], [], maxSteps, 'S2'), 'results/exp' + params.numExp + '_S2.csv')
